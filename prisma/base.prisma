datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Education {
    id    String  @id @default(uuid())
    name  String
    image String?
    user  User[]
}

model User {
    id              String   @id @default(uuid())
    email           String   @unique
    emailVerified   Boolean  @default(false)
    name            String
    image           String   @default("https://res.cloudinary.com/lms07/image/upload/v1645954589/avatar/6214b94ad832b0549b436264_avatar1645954588291.png")
    backgroundImage String   @default("https://www.solidbackgrounds.com/images/1920x1080/1920x1080-gray-solid-color-background.jpg")
    password        String?
    role            Role     @default(USER)
    createdAt       DateTime @default(now())
    cityId          String

    jobId       String
    aboutme     String      @db.Text
    educationId String?
    education   Education?  @relation(fields: [educationId], references: [id])
    job         Jobs        @relation(name: "JobsToUser", fields: [jobId], references: [id])
    secret      secret?
    cv          String      @default("")
    baseUser    following[] @relation(name: "user")
    userFollow  following[] @relation(name: "userFollow")
    Token       Token[]
}

model Jobs {
    id       String @id @default(uuid())
    title    String
    subTitle String @default("")
    user     User[] @relation(name: "JobsToUser")
}

model Token {
    id           String    @id @default(uuid())
    userId       String
    type         TokenType
    refreshId    String?   @unique
    refreshToken Token?    @relation("AccesHasRefresh", fields: [refreshId], references: [id])
    updatedAt    DateTime  @default(now()) @updatedAt
    accessToken  Token?    @relation("AccesHasRefresh")
    createdAt    DateTime  @default(now())
    valid        Boolean   @default(true)
    user         User      @relation(fields: [userId], references: [id])
}

model secret {
    id     String     @id @default(uuid())
    userId String     @unique
    token  String
    type   secretType @default(PASSWORD_RESET)
    user   User       @relation(fields: [userId], references: [id])
}

enum Role {
    USER
    COMPANY
    ADMIN
}

enum TokenType {
    RefreshToken
    AccessToken
}

enum secretType {
    EMAIL_VERIFICATION
    PASSWORD_RESET
}

model following {
    id       String @id @default(uuid())
    User     User   @relation(name: "user", fields: [userId], references: [id])
    userId   String
    friend   User   @relation(name: "userFollow", fields: [friendId], references: [id])
    friendId String
}
